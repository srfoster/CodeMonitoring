//Time : 2012-04-20 04:30:23.588
//Files Open : /pvekris/src/main/java/energy/interproc/CtxSensLocking.java 
/*AST Changes :
CHANGE IfStmt  to IfStmt  = 2
CHANGE IfStmt  to IfStmt BlockStmt  = 1
CHANGE MethodDeclaration  to MethodDeclaration  = 1
changes = 4
changes to method lockingCall = 1
private/protected method declarations = 1
*/package energy.interproc;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import com.ibm.wala.dataflow.IFDS.ICFGSupergraph;
import com.ibm.wala.dataflow.IFDS.IFlowFunction;
import com.ibm.wala.dataflow.IFDS.IMergeFunction;
import com.ibm.wala.dataflow.IFDS.IPartiallyBalancedFlowFunctions;
import com.ibm.wala.dataflow.IFDS.ISupergraph;
import com.ibm.wala.dataflow.IFDS.IUnaryFlowFunction;
import com.ibm.wala.dataflow.IFDS.IdentityFlowFunction;
import com.ibm.wala.dataflow.IFDS.KillEverything;
import com.ibm.wala.dataflow.IFDS.PartiallyBalancedTabulationProblem;
import com.ibm.wala.dataflow.IFDS.PathEdge;
import com.ibm.wala.dataflow.IFDS.TabulationDomain;
import com.ibm.wala.dataflow.IFDS.TabulationResult;
import com.ibm.wala.ipa.callgraph.AnalysisCache;
import com.ibm.wala.ipa.callgraph.CGNode;
import com.ibm.wala.ipa.cfg.BasicBlockInContext;
import com.ibm.wala.ipa.cfg.ExplodedInterproceduralCFG;
import com.ibm.wala.ssa.DefUse;
import com.ibm.wala.ssa.ISSABasicBlock;
import com.ibm.wala.ssa.SSAGetInstruction;
import com.ibm.wala.ssa.SSAInstruction;
import com.ibm.wala.ssa.SSAInvokeInstruction;
import com.ibm.wala.ssa.analysis.IExplodedBasicBlock;
import com.ibm.wala.types.FieldReference;
import com.ibm.wala.types.MethodReference;
import com.ibm.wala.util.CancelException;
import com.ibm.wala.util.collections.HashSetFactory;
import com.ibm.wala.util.collections.Pair;
import com.ibm.wala.util.debug.Assertions;
import com.ibm.wala.util.intset.IntIterator;
import com.ibm.wala.util.intset.IntSet;
import com.ibm.wala.util.intset.MutableMapping;
import com.ibm.wala.util.intset.MutableSparseIntSet;
import energy.analysis.Opts;
import energy.analysis.SpecialConditions.IsHeldCondition;
import energy.analysis.SpecialConditions.NullCondition;
import energy.analysis.SpecialConditions.SpecialCondition;
import energy.components.RunnableThread;
import energy.interproc.LockingTabulationSolver.LockingResult;
import energy.util.E;
public class CtxSensLocking {
  /** 
 * the supergraph over which tabulation is performed
 */
  private final ISupergraph<BasicBlockInContext<IExplodedBasicBlock>,CGNode> supergraph;
  /** 
 * the tabulation domain
 */
  private final TabDomain domain=new TabDomain();
  /** 
 * The underlaying Inter-procedural Control Flow Graph
 */
  private SensibleExplodedInterproceduralCFG icfg;
  /** 
 * We are going to extend the ICFGSupergraph that WALA had for reaching
 * definitions to that we are able to define our own sensible supergraph
 * (containing extra edges).
 * @author pvekris
 */
public class SensibleICFGSupergraph extends ICFGSupergraph {
    protected SensibleICFGSupergraph(    ExplodedInterproceduralCFG icfg,    AnalysisCache cache){
      super(icfg,cache);
    }
  }
  public CtxSensLocking(  SensibleExplodedInterproceduralCFG icfg){
    AnalysisCache cache=new AnalysisCache();
    this.icfg=icfg;
    this.supergraph=new SensibleICFGSupergraph(icfg,cache);
  }
  /** 
 * Useful functions
 */
  ArrayList<String> acquireSigs=new ArrayList<String>(){
    private static final long serialVersionUID=8053296118288414916L;
{
      add("android.os.PowerManager$WakeLock.acquire()V");
      add("android.os.PowerManager$WakeLock.acquire(J)V");
    }
  }
;
  ArrayList<String> releaseSigs=new ArrayList<String>(){
    private static final long serialVersionUID=8672603895106192877L;
{
      add("android.os.PowerManager$WakeLock.release()V");
    }
  }
;
  /** 
 * These functions will return a field reference or null if something went wrong
 * @param bb
 * @return null if this is not an acquire operation
 */
  private FieldReference acquire(  BasicBlockInContext<IExplodedBasicBlock> bb){
    return lockingCall(bb,acquireSigs);
  }
  private FieldReference release(  BasicBlockInContext<IExplodedBasicBlock> bb){
    return lockingCall(bb,releaseSigs);
  }
  private FieldReference lockingCall(  BasicBlockInContext<IExplodedBasicBlock> bb,  Collection<String> acceptedSigs){
    final IExplodedBasicBlock ebb=bb.getDelegate();
    SSAInstruction instruction=ebb.getInstruction();
    if (instruction instanceof SSAInvokeInstruction) {
      final SSAInvokeInstruction invInstr=(SSAInvokeInstruction)instruction;
      String methSig=invInstr.getDeclaredTarget().getSignature().toString();
      if (acceptedSigs.contains(methSig)) {
        int use=invInstr.getUse(0);
        CGNode node=bb.getNode();
        DefUse du=getDU(node);
        SSAInstruction def=du.getDef(use);
        if (def instanceof SSAGetInstruction) {
          SSAGetInstruction get=(SSAGetInstruction)def;
          FieldReference field=get.getDeclaredField();
          E.log(2,"Operating on field: " + field);
          return field;
        }
 else         if (def instanceof SSAGetInstruction) {
          Assertions.UNREACHABLE("Could not get field from instruction: " + def.toString());
        }
      }
    }
    return null;
  }
  /** 
 * Cache and get the DefUse info
 */
  private DefUse currDU=null;
  private CGNode currNode=null;
  private DefUse getDU(  CGNode node){
    if (node.equals(currNode)) {
      return currDU;
    }
 else {
      currNode=node;
      currDU=new DefUse(node.getIR());
      return currDU;
    }
  }
  /** 
 * Get the method reference called by a bb (null if not a call site)
 * @param bb
 * @return
 */
  @SuppressWarnings("unused") private MethodReference getCalledMethodReference(  BasicBlockInContext<IExplodedBasicBlock> bb){
    final IExplodedBasicBlock ebb=bb.getDelegate();
    SSAInstruction instruction=ebb.getInstruction();
    if (instruction instanceof SSAInvokeInstruction) {
      final SSAInvokeInstruction invInstr=(SSAInvokeInstruction)instruction;
      return invInstr.getDeclaredTarget();
    }
    return null;
  }
  /** 
 * Check if we have an entry for this in the bb -> thread map
 * @param bb
 * @return null if this is not a thread call site
 */
  private Map<FieldReference,Set<SingleLockState>> getCalledRunnable(  BasicBlockInContext<IExplodedBasicBlock> bb){
    RunnableThread calleeThread=icfg.getThreadInvocations(bb);
    if (calleeThread != null) {
      Assertions.productionAssertion(calleeThread.isSolved);
      Map<FieldReference,Set<SingleLockState>> threadExitState=calleeThread.getThreadExitState();
      E.log(2,calleeThread.toString() + " :: " + threadExitState.toString());
      return threadExitState;
    }
    return null;
  }
  /** 
 * Check if we have an entry for this in the bb -> special_conditions map
 * @param bb
 * @return null if this is not a thread call site
 */
  private SpecialCondition getSpecialCondition(  BasicBlockInContext<IExplodedBasicBlock> bb){
    SpecialCondition sc=icfg.getSpecialConditions(bb);
    if (sc != null) {
      return sc;
    }
    return null;
  }
  private Boolean checkDestination(  SpecialCondition specialCondition,  BasicBlockInContext<IExplodedBasicBlock> dest){
    ISSABasicBlock trueSucc=specialCondition.getTrueSucc();
    if (trueSucc != null) {
      if (dest.getDelegate().getLastInstructionIndex() == trueSucc.getLastInstructionIndex()) {
        return Boolean.TRUE;
      }
    }
    ISSABasicBlock falseSucc=specialCondition.getFalseSucc();
    if (dest.getDelegate().getLastInstructionIndex() == falseSucc.getLastInstructionIndex()) {
      return Boolean.FALSE;
    }
    return null;
  }
  /** 
 * Domain is the answer to the questions: (maybe acquired, must be acquired,
 * maybe released, must be released)
 * @author pvekris
 */
private class TabDomain extends MutableMapping<Pair<FieldReference,SingleLockState>> implements TabulationDomain<Pair<FieldReference,SingleLockState>,BasicBlockInContext<IExplodedBasicBlock>> {
    public boolean hasPriorityOver(    PathEdge<BasicBlockInContext<IExplodedBasicBlock>> p1,    PathEdge<BasicBlockInContext<IExplodedBasicBlock>> p2){
      return false;
    }
  }
  private IntSet getWakeLockTargets(  int d1,  FieldReference field,  SingleLockState st){
    Pair<FieldReference,SingleLockState> fact=Pair.make(field,st);
    int factNum=domain.getMappedIndex(fact);
    Assertions.productionAssertion(factNum >= 0,fact.toString());
    MutableSparseIntSet result=MutableSparseIntSet.makeEmpty();
    if (d1 != factNum) {
      Pair<FieldReference,SingleLockState> old=domain.getMappedObject(d1);
      if (!(old.fst).equals(field)) {
        result.add(d1);
        result.add(factNum);
      }
 else {
        result.add(factNum);
      }
    }
 else {
      result.add(d1);
    }
    return result;
  }
private class LockingFunctions implements IPartiallyBalancedFlowFunctions<BasicBlockInContext<IExplodedBasicBlock>> {
    private static final int PRINT_EXCEPTIONAL=2;
    private final TabDomain domain;
    protected LockingFunctions(    TabDomain domain){
      this.domain=domain;
    }
    @Override public IUnaryFlowFunction getNormalFlowFunction(    final BasicBlockInContext<IExplodedBasicBlock> src,    final BasicBlockInContext<IExplodedBasicBlock> dest){
      if (Opts.DATAFLOW_IGNORE_EXCEPTIONAL && icfg.isExceptionalEdge(src,dest)) {
        return KillEverything.singleton();
      }
      if (Opts.ENFORCE_SPECIAL_CONDITIONS) {
        final SpecialCondition specialCondition=getSpecialCondition(src);
        if (specialCondition != null) {
          if (specialCondition instanceof NullCondition) {
            NullCondition nc=(NullCondition)specialCondition;
            Boolean checkDestination=checkDestination(nc,dest);
            if (checkDestination != null) {
              if (checkDestination.booleanValue()) {
                E.log(2,"Killing NULL PATH: " + src.toShortString() + " -> "+ dest.toShortString());
                return KillEverything.singleton();
              }
 else {
                E.log(2,"NOT NULL PATH: " + src.toShortString() + " -> "+ dest.toShortString());
              }
            }
          }
 else           if (specialCondition instanceof IsHeldCondition) {
            E.log(2,src.toShortString() + " -> " + dest.toShortString()+ " : "+ specialCondition.toString());
            IsHeldCondition isc=(IsHeldCondition)specialCondition;
            Boolean checkDestination=checkDestination(isc,dest);
            if (checkDestination != null) {
              if (checkDestination.booleanValue()) {
                E.log(2,"ISHELD TRUE PATH: " + src.toShortString() + " -> "+ dest.toShortString());
              }
 else {
                E.log(2,"Killing ISHELD FALSE PATH: " + src.toShortString() + " -> "+ dest.toShortString());
                return KillEverything.singleton();
              }
            }
          }
        }
      }
      return IdentityFlowFunction.identity();
    }
    @Override public IUnaryFlowFunction getCallFlowFunction(    BasicBlockInContext<IExplodedBasicBlock> src,    BasicBlockInContext<IExplodedBasicBlock> dest,    BasicBlockInContext<IExplodedBasicBlock> ret){
      FieldReference acquireField=acquire(src);
      FieldReference releaseField=release(src);
      if ((acquireField != null) || (releaseField != null)) {
        return KillEverything.singleton();
      }
      return IdentityFlowFunction.identity();
    }
    @Override public IFlowFunction getReturnFlowFunction(    BasicBlockInContext<IExplodedBasicBlock> call,    BasicBlockInContext<IExplodedBasicBlock> src,    BasicBlockInContext<IExplodedBasicBlock> dest){
      if (Opts.DATAFLOW_IGNORE_EXCEPTIONAL && icfg.isExceptionalEdge(call,dest)) {
        E.log(PRINT_EXCEPTIONAL,"EXCEPTIONAL Killing [" + src.toShortString() + " -> "+ dest.toShortString()+ "]");
        return KillEverything.singleton();
      }
      FieldReference acquireField=acquire(call);
      FieldReference releaseField=release(call);
      if ((acquireField != null) || (releaseField != null)) {
        return KillEverything.singleton();
      }
      return IdentityFlowFunction.identity();
    }
    /** 
 * Flow function from call node to return node at a call site when
 * callees exist.
 */
    @Override public IUnaryFlowFunction getCallToReturnFlowFunction(    final BasicBlockInContext<IExplodedBasicBlock> src,    final BasicBlockInContext<IExplodedBasicBlock> dest){
      if (Opts.DATAFLOW_IGNORE_EXCEPTIONAL && icfg.isExceptionalEdge(src,dest)) {
        E.log(PRINT_EXCEPTIONAL,"EXCEPTIONAL Killing [" + src.toShortString() + " -> "+ dest.toShortString()+ "]");
        return KillEverything.singleton();
      }
      final FieldReference acquiredField=acquire(src);
      if (acquiredField != null) {
        E.log(2,"Acq: " + acquiredField.toString());
        return new IUnaryFlowFunction(){
          @Override public IntSet getTargets(          int d1){
            IntSet wakeLockTargets=getWakeLockTargets(d1,acquiredField,new SingleLockState(true,true,false,false));
            if (wakeLockTargets.size() > 1) {
              E.log(1,"AFTER RELEASE: " + wakeLockTargets.toString());
            }
            return wakeLockTargets;
          }
        }
;
      }
      final FieldReference releasedField=release(src);
      if (releasedField != null) {
        E.log(2,"Rel: " + releasedField.toString());
        return new IUnaryFlowFunction(){
          @Override public IntSet getTargets(          int d1){
            IntSet wakeLockTargets=getWakeLockTargets(d1,releasedField,new SingleLockState(false,false,true,true));
            if (wakeLockTargets.size() > 1) {
              E.log(1,"AFTER ACQUIRE: " + wakeLockTargets.toString());
            }
            return wakeLockTargets;
          }
        }
;
      }
      return KillEverything.singleton();
    }
    @Override public IUnaryFlowFunction getCallNoneToReturnFlowFunction(    final BasicBlockInContext<IExplodedBasicBlock> src,    final BasicBlockInContext<IExplodedBasicBlock> dest){
      if (Opts.DATAFLOW_IGNORE_EXCEPTIONAL && icfg.isExceptionalEdge(src,dest)) {
        return KillEverything.singleton();
      }
      final Map<FieldReference,Set<SingleLockState>> threadExitState=getCalledRunnable(src);
      if (threadExitState != null) {
        E.log(1,"Call to: " + threadExitState.toString());
        return new IUnaryFlowFunction(){
          @Override public IntSet getTargets(          int d1){
            MutableSparseIntSet threadSet=MutableSparseIntSet.makeEmpty();
            for (            Entry<FieldReference,Set<SingleLockState>> e : threadExitState.entrySet()) {
              Pair<FieldReference,Set<SingleLockState>> p=Pair.make(e.getKey(),e.getValue());
              Pair<FieldReference,SingleLockState> q=Pair.make(p.fst,SingleLockState.mergeSingleLockStates(p.snd));
              int ind=domain.add(q);
              threadSet.add(ind);
            }
            IntSet mergeStates=mergeStates(threadSet,d1);
            if (mergeStates.size() > 1) {
              E.log(1,"MERGE STATES: " + mergeStates.toString());
            }
            return mergeStates;
          }
        }
;
      }
      return IdentityFlowFunction.identity();
    }
    @Override public IFlowFunction getUnbalancedReturnFlowFunction(    BasicBlockInContext<IExplodedBasicBlock> src,    BasicBlockInContext<IExplodedBasicBlock> dest){
      if (Opts.DATAFLOW_IGNORE_EXCEPTIONAL && icfg.isExceptionalEdge(src,dest)) {
        E.log(PRINT_EXCEPTIONAL,"EXCEPTIONAL Killing[" + src.toShortString() + " -> "+ dest.toShortString()+ "]");
        return KillEverything.singleton();
      }
      return IdentityFlowFunction.identity();
    }
  }
  protected IntSet mergeStates(  IntSet x,  int j){
    IntIterator it=x.intIterator();
    Pair<FieldReference,SingleLockState> n=domain.getMappedObject(j);
    StringBuffer sb=new StringBuffer();
    sb.append("Merging: " + n.toString());
    MutableSparseIntSet result=MutableSparseIntSet.makeEmpty();
    boolean merged=false;
    while (it.hasNext()) {
      int i=it.next();
      Pair<FieldReference,SingleLockState> q=domain.getMappedObject(i);
      if (q.fst.equals(n.fst)) {
        merged=true;
        SingleLockState mergedState=q.snd.merge(n.snd);
        Pair<FieldReference,SingleLockState> newPair=Pair.make(q.fst,mergedState);
        int factNum=domain.getMappedIndex(newPair);
        Assertions.productionAssertion(factNum >= 0,newPair.toString());
        result.add(factNum);
      }
 else {
        result.add(i);
      }
      sb.append(" + " + q.toString());
    }
    if (!merged) {
      result.add(j);
    }
    sb.append(" -> " + n.toString());
    E.log(1,sb.toString());
    return result;
  }
private class LockingProblem implements PartiallyBalancedTabulationProblem<BasicBlockInContext<IExplodedBasicBlock>,CGNode,Pair<FieldReference,SingleLockState>> {
    private Collection<PathEdge<BasicBlockInContext<IExplodedBasicBlock>>> initialSeeds=collectInitialSeeds();
    private IPartiallyBalancedFlowFunctions<BasicBlockInContext<IExplodedBasicBlock>> flowFunctions=new LockingFunctions(domain);
    @Override public ISupergraph<BasicBlockInContext<IExplodedBasicBlock>,CGNode> getSupergraph(){
      return supergraph;
    }
    /** 
 * Define the set of path edges to start propagation with.
 * @return
 */
    private Collection<PathEdge<BasicBlockInContext<IExplodedBasicBlock>>> collectInitialSeeds(){
      Collection<PathEdge<BasicBlockInContext<IExplodedBasicBlock>>> result=HashSetFactory.make();
      for (      BasicBlockInContext<IExplodedBasicBlock> bb : supergraph) {
        FieldReference acquiredField=acquire(bb);
        if (acquiredField != null) {
          E.log(2,bb.toShortString() + ":: adding acquire fact: " + acquiredField.toString());
          SingleLockState sls=new SingleLockState(true,true,false,false);
          Pair<FieldReference,SingleLockState> fact=Pair.make(acquiredField,sls);
          int factNum=domain.add(fact);
          final CGNode cgNode=bb.getNode();
          BasicBlockInContext<IExplodedBasicBlock> fakeEntry=getFakeEntry(cgNode);
          result.add(PathEdge.createPathEdge(fakeEntry,factNum,bb,factNum));
        }
        FieldReference releasedField=release(bb);
        if (releasedField != null) {
          E.log(2,bb.toShortString() + ":: adding release fact: " + releasedField.toString());
          SingleLockState sls=new SingleLockState(false,false,true,true);
          Pair<FieldReference,SingleLockState> fact=Pair.make(releasedField,sls);
          int factNum=domain.add(fact);
          final CGNode cgNode=bb.getNode();
          BasicBlockInContext<IExplodedBasicBlock> fakeEntry=getFakeEntry(cgNode);
          result.add(PathEdge.createPathEdge(fakeEntry,factNum,bb,factNum));
        }
      }
      return result;
    }
    @Override public TabulationDomain<Pair<FieldReference,SingleLockState>,BasicBlockInContext<IExplodedBasicBlock>> getDomain(){
      return domain;
    }
    @Override public Collection<PathEdge<BasicBlockInContext<IExplodedBasicBlock>>> initialSeeds(){
      return initialSeeds;
    }
    @Override public IMergeFunction getMergeFunction(){
      return new IMergeFunction(){
        /** 
 * This method should return the factoid number z which should 
 * actually be propagated, based on a merge of the new fact j into 
 * the old state represented by x. return -1 if no fact should be 
 * propagated.
 */
        @Override public int merge(        IntSet x,        int j){
          Pair<FieldReference,SingleLockState> jObj=domain.getMappedObject(j);
          for (IntIterator it=x.intIterator(); it.hasNext(); ) {
            int i=it.next();
            Pair<FieldReference,SingleLockState> iObj=domain.getMappedObject(i);
            FieldReference iField=iObj.fst;
            if (iField.equals(jObj.fst)) {
              SingleLockState resState=jObj.snd.merge(iObj.snd);
              Pair<FieldReference,SingleLockState> pair=Pair.make(iField,resState);
              int ind=domain.add(pair);
              Assertions.productionAssertion(ind >= 0,pair.toString());
              return ind;
            }
          }
          return j;
        }
      }
;
    }
    @Override public IPartiallyBalancedFlowFunctions<BasicBlockInContext<IExplodedBasicBlock>> getFunctionMap(){
      return flowFunctions;
    }
    @Override public BasicBlockInContext<IExplodedBasicBlock> getFakeEntry(    BasicBlockInContext<IExplodedBasicBlock> n){
      final CGNode cgNode=n.getNode();
      return getFakeEntry(cgNode);
    }
    private BasicBlockInContext<IExplodedBasicBlock> getFakeEntry(    CGNode cgNode){
      BasicBlockInContext<IExplodedBasicBlock>[] entriesForProcedure=supergraph.getEntriesForProcedure(cgNode);
      assert entriesForProcedure.length == 1;
      return entriesForProcedure[0];
    }
  }
  /** 
 * perform the tabulation analysis and return the {@link TabulationResult}
 */
  public LockingResult analyze(){
    LockingTabulationSolver solver=new LockingTabulationSolver(new LockingProblem(),null);
    LockingResult result=null;
    try {
      result=solver.solve();
    }
 catch (    CancelException e) {
      e.printStackTrace();
    }
    return result;
  }
  public ISupergraph<BasicBlockInContext<IExplodedBasicBlock>,CGNode> getSupergraph(){
    return supergraph;
  }
  public TabulationDomain<Pair<FieldReference,SingleLockState>,BasicBlockInContext<IExplodedBasicBlock>> getDomain(){
    return domain;
  }
}
