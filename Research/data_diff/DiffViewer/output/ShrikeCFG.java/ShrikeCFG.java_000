//Time : 2012-04-24 18:48:53.084
//Files Open : /com.ibm.wala.core/src/com/ibm/wala/cfg/ShrikeCFG.java /com.ibm.wala.core/src/com/ibm/wala/cfg/AbstractCFG.java /com.ibm.wala.core/src/com/ibm/wala/ssa/SSACFG.java /com.ibm.wala.core/src/com/ibm/wala/cfg/ControlFlowGraph.java /pvekris/src/main/java/energy/analysis/AnalysisResults.java /com.ibm.wala.core/src/com/ibm/wala/cfg/CFGSanitizer.java /mcmutton/src/main/java/edu/ucsd/salud/mcmutton/BugHunt.java 
/** 
 * Copyright (c) 2002 - 2006 IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * Contributors:
 * IBM Corporation - initial API and implementation
 */
package com.ibm.wala.cfg;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Set;
import com.ibm.wala.classLoader.BytecodeLanguage;
import com.ibm.wala.classLoader.IBytecodeMethod;
import com.ibm.wala.classLoader.IClass;
import com.ibm.wala.classLoader.IClassLoader;
import com.ibm.wala.classLoader.IMethod;
import com.ibm.wala.ipa.cha.IClassHierarchy;
import com.ibm.wala.shrikeBT.ExceptionHandler;
import com.ibm.wala.shrikeBT.IInstruction;
import com.ibm.wala.shrikeBT.IInvokeInstruction;
import com.ibm.wala.shrikeBT.ReturnInstruction;
import com.ibm.wala.shrikeBT.ThrowInstruction;
import com.ibm.wala.shrikeCT.InvalidClassFileException;
import com.ibm.wala.types.ClassLoaderReference;
import com.ibm.wala.types.MethodReference;
import com.ibm.wala.types.TypeReference;
import com.ibm.wala.util.collections.ArrayIterator;
import com.ibm.wala.util.collections.HashSetFactory;
import com.ibm.wala.util.debug.Assertions;
import com.ibm.wala.util.graph.impl.NodeWithNumber;
import com.ibm.wala.util.shrike.ShrikeUtil;
import com.ibm.wala.util.warnings.Warning;
import com.ibm.wala.util.warnings.Warnings;
/** 
 * A graph of basic blocks.
 */
public class ShrikeCFG extends AbstractCFG<IInstruction,ShrikeCFG.BasicBlock> {
  private static final boolean DEBUG=false;
  private int[] instruction2Block;
  private final IBytecodeMethod method;
  /** 
 * Cache this here for efficiency
 */
  private final int hashBase;
  /** 
 * Set of Shrike {@link ExceptionHandler} objects that cover this method.
 */
  final private Set<ExceptionHandler> exceptionHandlers=HashSetFactory.make(10);
  public ShrikeCFG(  IBytecodeMethod method) throws IllegalArgumentException {
    super(method);
    if (method == null) {
      throw new IllegalArgumentException("method cannot be null");
    }
    this.method=method;
    this.hashBase=method.hashCode() * 9967;
    makeBasicBlocks();
    init();
    computeI2BMapping();
    computeEdges();
    if (DEBUG) {
      System.err.println(this);
    }
  }
  @Override public IBytecodeMethod getMethod(){
    return method;
  }
  @Override public int hashCode(){
    return 9511 * getMethod().hashCode();
  }
  @Override public boolean equals(  Object o){
    return (o instanceof ShrikeCFG) && getMethod().equals(((ShrikeCFG)o).getMethod());
  }
  public IInstruction[] getInstructions(){
    try {
      return method.getInstructions();
    }
 catch (    InvalidClassFileException e) {
      e.printStackTrace();
      Assertions.UNREACHABLE();
      return null;
    }
  }
  /** 
 * Compute a mapping from instruction to basic block. Also, compute the blocks that end with a 'normal' return.
 */
  private void computeI2BMapping(){
    instruction2Block=new int[getInstructions().length];
    for (Iterator it=iterator(); it.hasNext(); ) {
      final BasicBlock b=(BasicBlock)it.next();
      for (int j=b.getFirstInstructionIndex(); j <= b.getLastInstructionIndex(); j++) {
        instruction2Block[j]=getNumber(b);
      }
    }
  }
  /** 
 * Compute outgoing edges in the control flow graph.
 */
  private void computeEdges(){
    for (Iterator it=iterator(); it.hasNext(); ) {
      BasicBlock b=(BasicBlock)it.next();
      if (b.equals(exit())) {
        continue;
      }
 else       if (b.equals(entry())) {
        BasicBlock bb0=getBlockForInstruction(0);
        assert bb0 != null;
        addNormalEdge(b,bb0);
      }
 else {
        b.computeOutgoingEdges();
      }
    }
  }
  private void makeBasicBlocks(){
    ExceptionHandler[][] handlers;
    try {
      handlers=method.getHandlers();
    }
 catch (    InvalidClassFileException e) {
      e.printStackTrace();
      Assertions.UNREACHABLE();
      handlers=null;
    }
    boolean[] r=new boolean[getInstructions().length];
    boolean[] catchers=new boolean[getInstructions().length];
    int blockCount=2;
    r[0]=true;
    IInstruction[] instructions=getInstructions();
    for (int i=0; i < instructions.length; i++) {
      int[] targets=instructions[i].getBranchTargets();
      if (targets.length > 0 || !instructions[i].isFallThrough()) {
        if (i + 1 < instructions.length && !r[i + 1]) {
          r[i + 1]=true;
          blockCount++;
        }
      }
      for (int j=0; j < targets.length; j++) {
        if (!r[targets[j]]) {
          r[targets[j]]=true;
          blockCount++;
        }
      }
      if (instructions[i].isPEI()) {
        ExceptionHandler[] hs=handlers[i];
        if (i + 1 < instructions.length && !r[i + 1]) {
          r[i + 1]=true;
          blockCount++;
        }
        if (hs != null && hs.length > 0) {
          for (int j=0; j < hs.length; j++) {
            exceptionHandlers.add(hs[j]);
            if (!r[hs[j].getHandler()]) {
              r[hs[j].getHandler()]=true;
              blockCount++;
            }
            catchers[hs[j].getHandler()]=true;
          }
        }
      }
    }
    BasicBlock entry=new BasicBlock(-1);
    addNode(entry);
    int j=1;
    for (int i=0; i < r.length; i++) {
      if (r[i]) {
        BasicBlock b=new BasicBlock(i);
        addNode(b);
        if (catchers[i]) {
          setCatchBlock(j);
        }
        j++;
      }
    }
    BasicBlock exit=new BasicBlock(-1);
    addNode(exit);
  }
  /** 
 * Return an instruction's basic block in the CFG given the index of the instruction in the CFG's instruction array.
 */
  public BasicBlock getBlockForInstruction(  int index){
    return getNode(instruction2Block[index]);
  }
public final class BasicBlock extends NodeWithNumber implements IBasicBlock<IInstruction> {
    /** 
 * The number of the ShrikeBT instruction that begins this block.
 */
    final private int startIndex;
    public BasicBlock(    int startIndex){
      this.startIndex=startIndex;
    }
    public boolean isCatchBlock(){
      return ShrikeCFG.this.isCatchBlock(getNumber());
    }
    private void computeOutgoingEdges(){
      if (DEBUG) {
        System.err.println("Block " + this + ": computeOutgoingEdges()");
      }
      IInstruction last=getInstructions()[getLastInstructionIndex()];
      int[] targets=last.getBranchTargets();
      for (int i=0; i < targets.length; i++) {
        BasicBlock b=getBlockForInstruction(targets[i]);
        addNormalEdgeTo(b);
      }
      addExceptionalEdges(last);
      if (last.isFallThrough()) {
        BasicBlock next=getNode(getNumber() + 1);
        addNormalEdgeTo(next);
      }
      if (last instanceof ReturnInstruction) {
        BasicBlock exit=exit();
        addNormalEdgeTo(exit);
      }
    }
    /** 
 * Add any exceptional edges generated by the last instruction in a basic block.
 * @param last the last instruction in a basic block.
 */
    protected void addExceptionalEdges(    IInstruction last){
      IClassHierarchy cha=getMethod().getClassHierarchy();
      if (last.isPEI()) {
        Collection<TypeReference> exceptionTypes=null;
        boolean goToAllHandlers=false;
        ExceptionHandler[] hs=getExceptionHandlers();
        if (last instanceof ThrowInstruction) {
          goToAllHandlers=true;
        }
 else {
          if (hs != null && hs.length > 0) {
            IClassLoader loader=getMethod().getDeclaringClass().getClassLoader();
            BytecodeLanguage l=(BytecodeLanguage)loader.getLanguage();
            exceptionTypes=l.getImplicitExceptionTypes(last);
            if (last instanceof IInvokeInstruction) {
              IInvokeInstruction call=(IInvokeInstruction)last;
              exceptionTypes=HashSetFactory.make(exceptionTypes);
              MethodReference target=MethodReference.findOrCreate(l,loader.getReference(),call.getClassType(),call.getMethodName(),call.getMethodSignature());
              try {
                exceptionTypes.addAll(l.inferInvokeExceptions(target,cha));
              }
 catch (              InvalidClassFileException e) {
                e.printStackTrace();
                Assertions.UNREACHABLE();
              }
            }
          }
        }
        if (hs != null && hs.length > 0) {
          if (!goToAllHandlers) {
            exceptionTypes=HashSetFactory.make(exceptionTypes);
          }
          boolean needEdgeToExitForAllHandlers=true;
          for (int j=0; j < hs.length; j++) {
            if (DEBUG) {
              System.err.println(" handler " + hs[j]);
            }
            BasicBlock b=getBlockForInstruction(hs[j].getHandler());
            if (DEBUG) {
              System.err.println(" target " + b);
            }
            if (goToAllHandlers) {
              if (DEBUG) {
                System.err.println(" gotoAllHandlers " + b);
              }
              addExceptionalEdgeTo(b);
              if (hs[j].getCatchClass() == null) {
                needEdgeToExitForAllHandlers=false;
                break;
              }
            }
 else {
              TypeReference caughtException=null;
              if (hs[j].getCatchClass() != null) {
                ClassLoaderReference loader=ShrikeCFG.this.getMethod().getDeclaringClass().getReference().getClassLoader();
                caughtException=ShrikeUtil.makeTypeReference(loader,hs[j].getCatchClass());
                if (DEBUG) {
                  System.err.println(" caughtException " + caughtException);
                }
                IClass caughtClass=cha.lookupClass(caughtException);
                if (caughtClass == null) {
                  addExceptionalEdgeTo(b);
                  Warnings.add(FailedExceptionResolutionWarning.create(caughtException));
                  caughtException=null;
                }
              }
 else {
                if (DEBUG) {
                  System.err.println(" catchClass() == null");
                }
                if (!exceptionTypes.isEmpty()) {
                  addExceptionalEdgeTo(b);
                  exceptionTypes.clear();
                  caughtException=null;
                }
              }
              if (caughtException != null) {
                IClass caughtClass=cha.lookupClass(caughtException);
                ArrayList<TypeReference> caught=new ArrayList<TypeReference>(exceptionTypes.size());
                for (                TypeReference t : exceptionTypes) {
                  if (t != null) {
                    IClass klass=cha.lookupClass(t);
                    if (klass == null) {
                      Warnings.add(FailedExceptionResolutionWarning.create(caughtException));
                      addExceptionalEdgeTo(b);
                    }
 else {
                      boolean subtype1=cha.isSubclassOf(klass,caughtClass);
                      if (subtype1 || cha.isSubclassOf(caughtClass,klass)) {
                        addExceptionalEdgeTo(b);
                        if (subtype1) {
                          caught.add(t);
                        }
                      }
                    }
                  }
                }
                exceptionTypes.removeAll(caught);
              }
            }
          }
          if ((exceptionTypes == null && needEdgeToExitForAllHandlers) || (exceptionTypes != null && !exceptionTypes.isEmpty())) {
            BasicBlock exit=exit();
            addExceptionalEdgeTo(exit);
          }
        }
 else {
          BasicBlock exit=exit();
          addExceptionalEdgeTo(exit);
        }
      }
    }
    private ExceptionHandler[] getExceptionHandlers(){
      ExceptionHandler[][] handlers;
      try {
        handlers=method.getHandlers();
      }
 catch (      InvalidClassFileException e) {
        e.printStackTrace();
        Assertions.UNREACHABLE();
        handlers=null;
      }
      ExceptionHandler[] hs=handlers[getLastInstructionIndex()];
      return hs;
    }
    private void addNormalEdgeTo(    BasicBlock b){
      addNormalEdge(this,b);
    }
    private void addExceptionalEdgeTo(    BasicBlock b){
      addExceptionalEdge(this,b);
    }
    public int getLastInstructionIndex(){
      if (this == entry() || this == exit()) {
        return -2;
      }
      if (getNumber() == (getMaxNumber() - 1)) {
        return getInstructions().length - 1;
      }
 else {
        BasicBlock next=getNode(getNumber() + 1);
        return next.getFirstInstructionIndex() - 1;
      }
    }
    public int getFirstInstructionIndex(){
      return startIndex;
    }
    @Override public String toString(){
      return "BB[Shrike]" + getNumber() + " - "+ method.getDeclaringClass().getReference().getName()+ "."+ method.getName();
    }
    public boolean isExitBlock(){
      return this == ShrikeCFG.this.exit();
    }
    public boolean isEntryBlock(){
      return this == ShrikeCFG.this.entry();
    }
    public IMethod getMethod(){
      return ShrikeCFG.this.getMethod();
    }
    @Override public int hashCode(){
      return hashBase + getNumber();
    }
    @Override public boolean equals(    Object o){
      return (o instanceof BasicBlock) && ((BasicBlock)o).getMethod().equals(getMethod()) && ((BasicBlock)o).getNumber() == getNumber();
    }
    public int getNumber(){
      return getGraphNodeId();
    }
    public Iterator<IInstruction> iterator(){
      return new ArrayIterator<IInstruction>(getInstructions(),getFirstInstructionIndex(),getLastInstructionIndex());
    }
  }
  @Override public String toString(){
    StringBuffer s=new StringBuffer("");
    for (Iterator it=iterator(); it.hasNext(); ) {
      BasicBlock bb=(BasicBlock)it.next();
      s.append("BB").append(getNumber(bb)).append("\n");
      for (int j=bb.getFirstInstructionIndex(); j <= bb.getLastInstructionIndex(); j++) {
        s.append("  ").append(j).append("  ").append(getInstructions()[j]).append("\n");
      }
      Iterator<BasicBlock> succNodes=getSuccNodes(bb);
      while (succNodes.hasNext()) {
        s.append("    -> BB").append(getNumber(succNodes.next())).append("\n");
      }
    }
    return s.toString();
  }
  public int getMaxStackHeight(){
    return method.getMaxStackHeight();
  }
  public int getMaxLocals(){
    return method.getMaxLocals();
  }
  public Set<ExceptionHandler> getExceptionHandlers(){
    return exceptionHandlers;
  }
  public int getProgramCounter(  int index){
    try {
      return method.getBytecodeIndex(index);
    }
 catch (    InvalidClassFileException e) {
      e.printStackTrace();
      Assertions.UNREACHABLE();
      return -1;
    }
  }
  /** 
 * A warning when we fail to resolve the type of an exception
 */
private static class FailedExceptionResolutionWarning extends Warning {
    final TypeReference T;
    FailedExceptionResolutionWarning(    TypeReference T){
      super(Warning.MODERATE);
      this.T=T;
    }
    @Override public String getMsg(){
      return getClass().toString() + " : " + T;
    }
    public static FailedExceptionResolutionWarning create(    TypeReference T){
      return new FailedExceptionResolutionWarning(T);
    }
  }
}
