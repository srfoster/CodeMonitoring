//Time : 2012-04-27 05:46:51.438
//Files Open : /pvekris/src/main/java/energy/analysis/ThreadInvestigation.java 
/*AST Changes :
CHANGE ExpressionStmt  to IfStmt ExpressionStmt  = 1
CHANGE MethodDeclaration  to MethodDeclaration InitializerDeclaration  = 1
changes = 2
changes to method prepare = 1
private/protected method declarations = 1
*/package energy.analysis;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map.Entry;
import com.ibm.wala.classLoader.NewSiteReference;
import com.ibm.wala.ipa.callgraph.CGNode;
import com.ibm.wala.ssa.DefUse;
import com.ibm.wala.ssa.IR;
import com.ibm.wala.ssa.SSAInstruction;
import com.ibm.wala.ssa.SSAInvokeInstruction;
import com.ibm.wala.ssa.SSANewInstruction;
import com.ibm.wala.util.debug.Assertions;
import energy.components.Component;
import energy.components.RunnableThread;
import energy.util.E;
import energy.util.SSAProgramPoint;
public class ThreadInvestigation {
  private AppCallGraph cg;
  private ComponentManager cm;
  public ThreadInvestigation(  ComponentManager componentManager){
    this.cg=componentManager.getCG();
    this.cm=componentManager;
  }
  HashSet<SSANewInstruction> iSet=new HashSet<SSANewInstruction>();
  /** 
 * This will map the point where a thread is spawned to the threads class reference 
 */
  private HashMap<SSAProgramPoint,Component> siteToClass=null;
  /** 
 * Invoke this to fill up the ProgPoint to thread mapping
 */
  private void prepare(){
    siteToClass=new HashMap<SSAProgramPoint,Component>();
    iSet.clear();
    IR ir=n.getIR();
    if (ir == null) {
      E.log(2,"Skipping: " + n.getMethod().toString());
      continue;
    }
    for (Iterator<NewSiteReference> it=ir.iterateNewSites(); it.hasNext(); ) {
      SSANewInstruction newi=ir.getNew(it.next());
      if (newi.getConcreteType().toString().equals("<Application,Ljava/lang/Thread>")) {
        iSet.add(newi);
      }
    }
    DefUse du=new DefUse(ir);
    SSAProgramPoint pp=null;
    Component targetComponent=null;
    Iterator<SSAInstruction> uses=du.getUses(i.getDef());
    SSAInstruction user=uses.next();
    SSAInvokeInstruction inv=(SSAInvokeInstruction)user;
    E.log(2,"Initializer: " + n.getMethod().getSignature().toString() + " - "+ inv.toString());
  }
  public void printThreadPairs(){
    for (    Entry<SSAProgramPoint,Component> e : siteToClass.entrySet()) {
      E.log(1,e.getKey().toString() + " -- > " + e.getValue().toString());
    }
  }
  public HashMap<SSAProgramPoint,Component> getThreadInvocations(){
    if (siteToClass == null) {
      prepare();
    }
    return siteToClass;
  }
}
