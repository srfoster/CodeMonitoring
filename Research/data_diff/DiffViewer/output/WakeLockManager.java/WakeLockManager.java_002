//Time : 2012-04-12 06:38:00.939
//Files Open : /mcmutton/src/main/java/edu/ucsd/salud/mcmutton/BugHunt.java /pvekris/src/main/java/energy/interproc/CtxSensLocking.java /pvekris/src/main/java/energy/analysis/WakeLockManager.java /pvekris/src/main/java/energy/analysis/Opts.java /pvekris/src/main/java/energy/analysis/SpecialConditions.java /pvekris/src/main/java/energy/analysis/AnalysisResults.java /pvekris/src/main/java/energy/analysis/ComponentManager.java /pvekris/src/main/java/energy/analysis/AppCallGraph.java 
/*AST Changes :
CHANGE ExpressionStmt  to ExpressionStmt  = 1
CHANGE ForeachStmt  to ForeachStmt  = 1
CHANGE MethodDeclaration  to MethodDeclaration  = 1
changes = 3
changes to method printAllWakeLocks = 1
public method declarations = 1
*/package energy.analysis;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map.Entry;
import com.ibm.wala.classLoader.IClass;
import com.ibm.wala.classLoader.IField;
import com.ibm.wala.ipa.callgraph.CGNode;
import com.ibm.wala.ipa.callgraph.propagation.InstanceKey;
import com.ibm.wala.ipa.callgraph.propagation.PointerKey;
import com.ibm.wala.ipa.cha.ClassHierarchy;
import com.ibm.wala.shrikeBT.IBinaryOpInstruction.IOperator;
import com.ibm.wala.shrikeBT.IBinaryOpInstruction.Operator;
import com.ibm.wala.ssa.DefUse;
import com.ibm.wala.ssa.IR;
import com.ibm.wala.ssa.SSABinaryOpInstruction;
import com.ibm.wala.ssa.SSAGetInstruction;
import com.ibm.wala.ssa.SSAInstruction;
import com.ibm.wala.ssa.SSAInvokeInstruction;
import com.ibm.wala.ssa.SSAPutInstruction;
import com.ibm.wala.types.FieldReference;
import com.ibm.wala.types.TypeReference;
import com.ibm.wala.util.intset.OrdinalSet;
import energy.util.E;
import energy.util.SSAProgramPoint;
public class WakeLockManager {
  private AppCallGraph cg;
  private ComponentManager cm;
  private ClassHierarchy ch;
public interface WakeLockInstance {
  }
public class FieldWakeLock implements WakeLockInstance {
    private FieldReference field;
    public FieldReference getField(){
      return field;
    }
    public FieldWakeLock(    FieldReference f){
      this.field=f;
    }
    @Override public int hashCode(){
      return (-1) * field.hashCode();
    }
    @Override public boolean equals(    Object obj){
      if (obj instanceof FieldWakeLock) {
        FieldWakeLock lwl=(FieldWakeLock)obj;
        return field.equals(lwl.getField());
      }
      return false;
    }
    @Override public String toString(){
      return ("F:" + field.toString());
    }
  }
public class LocalWakeLock implements WakeLockInstance {
    private SSAProgramPoint pp;
    public LocalWakeLock(    SSAProgramPoint pp){
      this.pp=pp;
    }
    public SSAProgramPoint getCreatioinPP(){
      return pp;
    }
    @Override public int hashCode(){
      return pp.hashCode();
    }
    @Override public boolean equals(    Object obj){
      if (obj instanceof LocalWakeLock) {
        LocalWakeLock lwl=(LocalWakeLock)obj;
        return pp.equals(lwl.getCreatioinPP());
      }
      return false;
    }
    @Override public String toString(){
      return ("LOCAL: " + pp.toString());
    }
  }
public class WakeLockInfo {
    private Collection<LockType> types;
    private boolean referenceCounted;
    WakeLockInfo(){
    }
    WakeLockInfo(    Collection<LockType> t,    boolean r){
      this.types=t;
      this.referenceCounted=r;
    }
    public Collection<LockType> getLockType(){
      return types;
    }
    public void setLockType(    Collection<LockType> types){
      this.types=types;
    }
    public Boolean isReferenceCounted(){
      return referenceCounted;
    }
    public void setReferenceCounted(    Boolean referenceCounted){
      this.referenceCounted=referenceCounted;
    }
    public String toString(){
      return ("T:" + types.toString() + " RC:"+ referenceCounted);
    }
  }
  public WakeLockManager(  ClassHierarchy classHierarchy){
    this.ch=classHierarchy;
  }
  HashSet<FieldReference> powerManagers=null;
  HashMap<WakeLockInstance,WakeLockInfo> variousWakeLocks=null;
  public void scanDefinitions(){
    for (    IClass c : ch) {
      for (      IField f : c.getAllFields()) {
        FieldReference reference=f.getReference();
        TypeReference fieldType=reference.getFieldType();
        if (fieldType.equals(TypeReference.ApplicationPowerManager)) {
          E.log(2,"PowerManager: " + reference.toString());
          addPowerManager(reference);
        }
 else         if (fieldType.equals(TypeReference.PrimordialPowerManager)) {
          E.log(2,"PowerManager: " + reference.toString());
          addPowerManager(reference);
        }
 else         if (fieldType.equals(TypeReference.ApplicationWakeLock)) {
          E.log(1,reference.toString());
          addWakeLock(reference);
        }
 else         if (fieldType.equals(TypeReference.PrimordialWakeLock)) {
          E.log(1,reference.toString());
          addWakeLock(reference);
        }
      }
      ;
    }
  }
  private void addWakeLock(  FieldReference reference){
    if (variousWakeLocks == null) {
      variousWakeLocks=new HashMap<WakeLockInstance,WakeLockInfo>();
    }
    variousWakeLocks.put(new FieldWakeLock(reference),new WakeLockInfo(null,true));
  }
  private void addPowerManager(  FieldReference reference){
    if (powerManagers == null) {
      powerManagers=new HashSet<FieldReference>();
    }
    powerManagers.add(reference);
  }
  private HashSet<WakeLockInfo> getAllUnresolvedWakeLocks(){
    if (variousWakeLocks == null) {
      variousWakeLocks=new HashMap<WakeLockInstance,WakeLockInfo>();
    }
    HashSet<WakeLockInfo> result=new HashSet<WakeLockManager.WakeLockInfo>();
    for (    WakeLockInfo wl : variousWakeLocks.values()) {
      if (wl.getLockType() == null) {
        result.add(wl);
      }
    }
    return result;
  }
  public boolean isWakeLock(  FieldReference fr){
    if (variousWakeLocks == null) {
      scanCreation();
    }
    return variousWakeLocks.containsKey(fr);
  }
  public enum LockType {  ACQUIRE_CAUSES_WAKEUP(0x10000000),   FULL_WAKE_LOCK(0x0000001a),   ON_AFTER_RELEASE(0x20000000),   PARTIAL_WAKE_LOCK(0x00000001),   SCREEN_BRIGHT_WAKE_LOCK(0x0000000a),   SCREEN_DIM_WAKE_LOCK(0x00000006),   UNKNOWN(0xFFFFFFFF);   private int code;
  LockType(  int value){
    this.code=value;
  }
  public int getCode(){
    return code;
  }
}
  private Collection<LockType> getLockType(  int i){
    HashSet<LockType> result=new HashSet<LockType>();
    for (    LockType lt : LockType.values()) {
      if ((i & lt.getCode()) == lt.getCode()) {
        result.add(lt);
      }
    }
    return result;
  }
  public void scanCreation(){
    for (    CGNode n : cg) {
      IR ir=n.getIR();
      DefUse du=null;
      if (ir == null) {
        E.log(2,"Skipping: " + n.getMethod().toString());
        continue;
      }
      for (      SSAInstruction instr : ir.getInstructions()) {
        if (instr instanceof SSAInvokeInstruction) {
          SSAInvokeInstruction inv=(SSAInvokeInstruction)instr;
          if (inv.toString().contains("newWakeLock")) {
            E.log(2,n.getMethod().getSignature().toString());
            E.log(2,inv.toString());
            if (du == null) {
              du=new DefUse(ir);
            }
            Collection<LockType> lockType=null;
            lockType=resolveLockTypeFromVar(ir,du,inv.getUse(1));
            int lockNum=inv.getDef();
            Iterator<SSAInstruction> uses=du.getUses(lockNum);
            SSAInstruction useInstr=uses.next();
            if (useInstr instanceof SSAPutInstruction) {
              SSAPutInstruction put=(SSAPutInstruction)useInstr;
              FieldReference field=put.getDeclaredField();
              WakeLockInfo wli=variousWakeLocks.get(new FieldWakeLock(field));
              if (wli != null) {
                wli.setLockType(lockType);
              }
 else {
                wli=new WakeLockInfo(lockType,true);
                variousWakeLocks.put(new FieldWakeLock(field),wli);
              }
              E.log(2,"Field: " + field + "\nINFO= "+ wli.toString());
            }
 else {
              SSAInstruction def=du.getDef(lockNum);
              E.log(1,"Local WakeLock Variable: " + def.toString());
              SSAProgramPoint pp=new SSAProgramPoint(n,instr);
              WakeLockInfo wli=variousWakeLocks.get(new LocalWakeLock(pp));
              if (wli != null) {
                wli.setLockType(lockType);
              }
 else {
                wli=new WakeLockInfo(lockType,true);
                variousWakeLocks.put(new LocalWakeLock(pp),wli);
              }
            }
          }
 else           if (inv.toString().contains("setReferenceCounted")) {
            FieldReference field=getFieldFromVar(ir,du,inv.getUse(0));
            int bit=inv.getUse(1);
            boolean refCounted=ir.getSymbolTable().isTrue(bit);
            if (field != null) {
              WakeLockInfo wli=variousWakeLocks.get(new FieldWakeLock(field));
              if (wli != null) {
                wli.setReferenceCounted(refCounted);
              }
 else {
                variousWakeLocks.put(new FieldWakeLock(field),new WakeLockInfo(null,refCounted));
              }
            }
 else {
              SSAInstruction def=du.getDef(inv.getUse(0));
              SSAProgramPoint pp=new SSAProgramPoint(n,def);
              WakeLockInfo wli=variousWakeLocks.get(new LocalWakeLock(pp));
              if (wli != null) {
                wli.setReferenceCounted(refCounted);
              }
 else {
                variousWakeLocks.put(new FieldWakeLock(field),new WakeLockInfo(null,refCounted));
              }
            }
          }
        }
      }
    }
    if (getAllUnresolvedWakeLocks().size() > 0) {
      E.log(1,"Could not resolve some WakeLocks.");
    }
  }
  private FieldReference getFieldFromVar(  IR ir,  DefUse du,  int use){
    SSAInstruction def=du.getDef(use);
    if (def instanceof SSAGetInstruction) {
      SSAGetInstruction get=(SSAGetInstruction)def;
      FieldReference field=get.getDeclaredField();
      E.log(2,"Operating on field: " + field);
      return field;
    }
    return null;
  }
  private Boolean getReferenceCounted(  IR ir,  DefUse du,  int lockNum){
    Iterator<SSAInstruction> uses=du.getUses(lockNum);
    while (uses.hasNext()) {
      SSAInstruction instr=uses.next();
      E.log(1,instr.toString());
      if (instr instanceof SSAInvokeInstruction) {
        SSAInvokeInstruction inv=(SSAInvokeInstruction)instr;
        if (inv.toString().contains("setReferenceCounted")) {
          E.log(1,inv.toString());
        }
      }
    }
    return Boolean.FALSE;
  }
  private Collection<LockType> resolveLockTypeFromVar(  IR ir,  DefUse du,  int use){
    try {
      int intValue=ir.getSymbolTable().getIntValue(use);
      return getLockType(intValue);
    }
 catch (    IllegalArgumentException e) {
      SSAInstruction def=du.getDef(use);
      HashSet<LockType> ret=new HashSet<LockType>();
      if (def instanceof SSABinaryOpInstruction) {
        SSABinaryOpInstruction bin=(SSABinaryOpInstruction)def;
        IOperator operator=bin.getOperator();
        if (operator == Operator.OR) {
          int use0=bin.getUse(0);
          int use1=bin.getUse(1);
          ret.addAll(resolveLockTypeFromVar(ir,du,use0));
          ret.addAll(resolveLockTypeFromVar(ir,du,use1));
        }
 else {
          ret.add(LockType.UNKNOWN);
        }
      }
 else {
        ret.add(LockType.UNKNOWN);
      }
      return ret;
    }
  }
  public void setAppCallGraph(  AppCallGraph cg){
    this.cg=cg;
  }
  public void printAllWakeLocks(){
    for (    Entry<WakeLockInstance,WakeLockInfo> e : variousWakeLocks.entrySet()) {
      E.log(1,e.getKey().toString() + "\n" + e.getValue().toString());
    }
  }
}
